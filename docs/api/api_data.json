[  {    "type": "POST",    "url": "/auth/changePassword",    "title": "Change Password",    "name": "ChangePassword",    "group": "Auth",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "oldPassword",            "description": "<p>The current password</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The new password</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password2",            "description": "<p>The new password confirmation</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    oldPassword : 12345\n    password : Pa$$w0rd\n    password2 : Pa$$w0rd\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly or passwords don't match</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/auth.js",    "groupTitle": "Auth"  },  {    "type": "POST",    "url": "/auth/login",    "title": "Login",    "name": "Login",    "group": "Auth",    "version": "1.0.0",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>The email to login with</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The password to login with</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    email : smartguy@hepia.ch\n    password : Pa$$w0rd\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>The JWT Token to use to access the rest of the API</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The ID of the user who logged in</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "{\n    \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc0FkbWluIjp0cnVlLCJiYWxhbmNlIjowLCJpc0xpYnJhcmlhbiI6ZmFsc2UsImFjY2VwdHNQYXltZW50cyI6ZmFsc2UsImFkbWluRm9yQXJlYXMiOltdLCJjYW5JbnZpdGUiOmZhbHNlLCJpc0F1ZGl0b3IiOmZhbHNlLCJlbWFpbCI6Im1heGltZWxvdmlub0BnbWFpbC5jb20iLCJuYW[...]\"\n    \"id\" : \"8008CAFE\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if email or password are wrong</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/auth.js",    "groupTitle": "Auth"  },  {    "type": "GET",    "url": "/users/all",    "title": "Get all users",    "name": "AllUsers",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>User array is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.id",            "description": "<p>The id of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The name of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.email",            "description": "<p>The email of the user</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isAdmin",            "description": "<p>A boolean to specify if the user has admin role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.canInvite",            "description": "<p>A boolean to specify if the user has invite role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.acceptsPayments",            "description": "<p>A boolean to specify if the user has acceptsPayment role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isAuditor",            "description": "<p>A boolean to specify if the user has auditor role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isLibrarian",            "description": "<p>A boolean to specify if the user has librarian role</p>"          },          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-.adminForAreas",            "description": "<p>An array of areas the user is admin for</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.adminForAreas.id",            "description": "<p>The id of the area</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.adminForAreas.name",            "description": "<p>The name of the area</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.importBatch",            "description": "<p>The import batch id of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.cardID",            "description": "<p>The id of the user card</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.virtualCard",            "description": "<p>The id of the user virtualCard</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.expiration",            "description": "<p>The expiration date of this user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "[\n\t{\n\t\t\"isAdmin\": false,\n\t\t\"isLibrarian\": false,\n\t\t\"acceptsPayments\": true,\n\t\t\"adminForAreas\": [],\n\t\t\"canInvite\": false,\n\t\t\"isAuditor\": false,\n\t\t\"email\": \"cafet@hepia.ch\",\n\t\t\"name\": \"Cafet Novae\",\n\t\t\"importBatch\": \"4526f000-7314-11e8-8f2b-9318a3e8a3ea\",\n\t\t\"id\": \"5b27dd110abf2c001c15f4b5\"\n\t},\n\t{\n\t\t\"isAdmin\": true,\n\t\t\"isLibrarian\": false,\n\t\t\"acceptsPayments\": false,\n\t\t\"adminForAreas\": [],\n\t\t\"canInvite\": false,\n\t\t\"isAuditor\": false,\n\t\t\"email\": \"root@pockethepia.maximelovino.ch\",\n\t\t\"name\": \"Default Root Account\",\n\t\t\"id\": \"5b1fd5bb44ab8b001de7de16\"\n\t}\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "POST",    "url": "/users/create",    "title": "Create user",    "name": "CreateUser",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The name of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>The email of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The password for the user</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isAdmin",            "description": "<p>A boolean to specify if the user has admin role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "canInvite",            "description": "<p>A boolean to specify if the user has invite role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "acceptsPayments",            "description": "<p>A boolean to specify if the user has acceptsPayment role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isAuditor",            "description": "<p>A boolean to specify if the user has auditor role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isLibrarian",            "description": "<p>A boolean to specify if the user has librarian role</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    name : El Risitas\n    email : risitas@jvc.com\n    password : Pa$$w0rd\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "GET",    "url": "/users/current",    "title": "Get connected user",    "name": "CurrentUser",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object",            "optional": false,            "field": "-",            "description": "<p>User object is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.id",            "description": "<p>The id of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The name of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.email",            "description": "<p>The email of the user</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isAdmin",            "description": "<p>A boolean to specify if the user has admin role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.canInvite",            "description": "<p>A boolean to specify if the user has invite role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.acceptsPayments",            "description": "<p>A boolean to specify if the user has acceptsPayment role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isAuditor",            "description": "<p>A boolean to specify if the user has auditor role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isLibrarian",            "description": "<p>A boolean to specify if the user has librarian role</p>"          },          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-.adminForAreas",            "description": "<p>An array of areas the user is admin for</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.adminForAreas.id",            "description": "<p>The id of the area</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.adminForAreas.name",            "description": "<p>The name of the area</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.importBatch",            "description": "<p>The import batch id of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.cardID",            "description": "<p>The id of the user card</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.virtualCard",            "description": "<p>The id of the user virtualCard</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.expiration",            "description": "<p>The expiration date of this user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "{\n\t\"isAdmin\": true,\n\t\"isLibrarian\": false,\n\t\"acceptsPayments\": false,\n\t\"adminForAreas\": [],\n\t\"canInvite\": false,\n\t\"isAuditor\": false,\n\t\"email\": \"maximelovino@gmail.com\",\n\t\"name\": \"Maxime Lovino\",\n\t\"importBatch\": \"f5b43380-74cf-11e8-8fd2-514acc764100\",\n\t\"id\": \"5b2ac574cb90fa001b99e843\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "POST",    "url": "/users/delete/:id",    "title": "Delete user",    "name": "DeleteUser",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the user to delete</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n    id : 5b1fd5bb44ab8b001de7de16\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if you try to delete yourself</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "PUT",    "url": "/users/resetPassword/:id",    "title": "Reset user password",    "name": "ResetPassword",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the user for which to reset the password</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n    id : 5b1fd5bb44ab8b001de7de16\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly or passwords don't match</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  }]
