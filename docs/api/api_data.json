[  {    "type": "POST",    "url": "/access/createArea",    "title": "Create an area",    "name": "AccessCreateArea",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The name of the area to create</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"name\" : \"El Risitas Area\"\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "POST",    "url": "/access/createRoom",    "title": "Create a room",    "name": "AccessCreateRoom",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The name of the room to create</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "areaID",            "description": "<p>The id of the area the room is in</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"name\" : \"El Risitas Room\",\n    \"areaID\" : \"4346378dsfgd\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the area doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "DELETE",    "url": "/access/accesses/:id",    "title": "Delete acess",    "name": "AccessDeleteAccess",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the access to delete</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"id\" : \"5374344234hr323bbh\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the access doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "POST",    "url": "/access/area/:id",    "title": "Delete an area",    "name": "AccessDeleteArea",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the area to delete</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"id\" : \"537434hr323bbh\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the area doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "POST",    "url": "/access/room/:id",    "title": "Delete a room",    "name": "AccessDeleteRoom",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the room to delete</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"id\" : \"5374344234hr323bbh\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the room doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "GET",    "url": "/access/accesses/my",    "title": "Get acesses for the connected user",    "name": "AccessGetAccessMy",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>The list of accesses is the root of the document</p>"          },          {            "group": "200",            "type": "Room",            "optional": false,            "field": "-.room",            "description": "<p>The room of the access</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.user",            "description": "<p>The user for the access</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.startDate",            "description": "<p>The start Date, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.endDate",            "description": "<p>The end Date, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.startTime",            "description": "<p>The start Time, as minutes past midnight</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.endTime",            "description": "<p>The end Time, as minutes past midnight</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " [\n\t{\n\t\t\"startTime\": 0,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": false,\n\t\t\t\"isLibrarian\": true,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"marco@lopes.com\",\n\t\t\t\"name\": \"Marco Lopes\",\n\t\t\t\"id\": \"5b2e149f0dde6c001bf242b2\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1530277560117,\n\t\t\"endDate\": 1530828000000,\n\t\t\"id\": \"5b362ec30dde6c001bf242c3\"\n\t},\n\t{\n\t\t\"startTime\": 0,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"maximelovino@gmail.com\",\n\t\t\t\"name\": \"Maxime Lovino\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcb7\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1531166290708,\n\t\t\"endDate\": 1532556000000,\n\t\t\"id\": \"5b43be5b0dde6c001bf242d1\"\n\t},\n\t{\n\t\t\"startTime\": 480,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"maximelovino@gmail.com\",\n\t\t\t\"name\": \"Maxime Lovino\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcb7\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1531166624790,\n\t\t\"endDate\": 1537394400000,\n\t\t\"id\": \"5b43bfb40dde6c001bf242d3\"\n\t}\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "GET",    "url": "/access/accesses/room/:id",    "title": "Get acesses for a room",    "name": "AccessGetAccessRoom",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>The list of accesses is the root of the document</p>"          },          {            "group": "200",            "type": "Room",            "optional": false,            "field": "-.room",            "description": "<p>The room of the access</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.user",            "description": "<p>The user for the access</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.startDate",            "description": "<p>The start Date, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.endDate",            "description": "<p>The end Date, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.startTime",            "description": "<p>The start Time, as minutes past midnight</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.endTime",            "description": "<p>The end Time, as minutes past midnight</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " [\n\t{\n\t\t\"startTime\": 0,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": false,\n\t\t\t\"isLibrarian\": true,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"marco@lopes.com\",\n\t\t\t\"name\": \"Marco Lopes\",\n\t\t\t\"id\": \"5b2e149f0dde6c001bf242b2\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1530277560117,\n\t\t\"endDate\": 1530828000000,\n\t\t\"id\": \"5b362ec30dde6c001bf242c3\"\n\t},\n\t{\n\t\t\"startTime\": 0,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"maximelovino@gmail.com\",\n\t\t\t\"name\": \"Maxime Lovino\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcb7\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1531166290708,\n\t\t\"endDate\": 1532556000000,\n\t\t\"id\": \"5b43be5b0dde6c001bf242d1\"\n\t},\n\t{\n\t\t\"startTime\": 480,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"maximelovino@gmail.com\",\n\t\t\t\"name\": \"Maxime Lovino\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcb7\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1531166624790,\n\t\t\"endDate\": 1537394400000,\n\t\t\"id\": \"5b43bfb40dde6c001bf242d3\"\n\t}\n]",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the room to get acceses for</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"id\" : \"5374344234hr323bbh\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the room doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "GET",    "url": "/access/accesses/user/:id",    "title": "Get acesses for a user",    "name": "AccessGetAccessUser",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>The list of accesses is the root of the document</p>"          },          {            "group": "200",            "type": "Room",            "optional": false,            "field": "-.room",            "description": "<p>The room of the access</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.user",            "description": "<p>The user for the access</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.startDate",            "description": "<p>The start Date, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.endDate",            "description": "<p>The end Date, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.startTime",            "description": "<p>The start Time, as minutes past midnight</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.endTime",            "description": "<p>The end Time, as minutes past midnight</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " [\n\t{\n\t\t\"startTime\": 0,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": false,\n\t\t\t\"isLibrarian\": true,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"marco@lopes.com\",\n\t\t\t\"name\": \"Marco Lopes\",\n\t\t\t\"id\": \"5b2e149f0dde6c001bf242b2\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1530277560117,\n\t\t\"endDate\": 1530828000000,\n\t\t\"id\": \"5b362ec30dde6c001bf242c3\"\n\t},\n\t{\n\t\t\"startTime\": 0,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"maximelovino@gmail.com\",\n\t\t\t\"name\": \"Maxime Lovino\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcb7\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1531166290708,\n\t\t\"endDate\": 1532556000000,\n\t\t\"id\": \"5b43be5b0dde6c001bf242d1\"\n\t},\n\t{\n\t\t\"startTime\": 480,\n\t\t\"endTime\": 1439,\n\t\t\"user\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"maximelovino@gmail.com\",\n\t\t\t\"name\": \"Maxime Lovino\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcb7\"\n\t\t},\n\t\t\"room\": {\n\t\t\t\"accessReaders\": [\n\t\t\t\t\"identifier1234\"\n\t\t\t],\n\t\t\t\"name\": \"A404\",\n\t\t\t\"area\": {\n\t\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t\t},\n\t\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t\t},\n\t\t\"startDate\": 1531166624790,\n\t\t\"endDate\": 1537394400000,\n\t\t\"id\": \"5b43bfb40dde6c001bf242d3\"\n\t}\n]",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the user to get acceses for</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"id\" : \"5374344234hr323bbh\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the user doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "GET",    "url": "/access/areas",    "title": "Retrieve all areas",    "name": "AccessGetAreas",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>Areas array is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The area name</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.id",            "description": "<p>The area id</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "[\n\t{\n\t\t\"name\": \"ITI Floor\",\n\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t},\n\t{\n\t\t\"name\": \"AP Floor\",\n\t\t\"id\": \"5b2f53450ferfre6c001bf242b4\"\n\t},\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "GET",    "url": "/access/room/:id",    "title": "Retrieve a single room",    "name": "AccessGetRoom",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the room to delete</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"id\" : \"5374344234hr323bbh\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object",            "optional": false,            "field": "-",            "description": "<p>Rooms array is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The room name</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.id",            "description": "<p>The room id</p>"          },          {            "group": "200",            "type": "String[]",            "optional": false,            "field": "-.accessReaders",            "description": "<p>The list of readers</p>"          },          {            "group": "200",            "type": "Area",            "optional": false,            "field": "-.area",            "description": "<p>The area containing the room</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "{\n\t\"accessReaders\": [\n\t\t\"identifier1234\"\n\t],\n\t\"name\": \"A404\",\n\t\"area\": {\n\t\t\"name\": \"ITI Floor\",\n\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t},\n\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the room doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "GET",    "url": "/access/rooms",    "title": "Retrieve all rooms",    "name": "AccessGetRooms",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>Rooms array is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The room name</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.id",            "description": "<p>The room id</p>"          },          {            "group": "200",            "type": "String[]",            "optional": false,            "field": "-.accessReaders",            "description": "<p>The list of readers</p>"          },          {            "group": "200",            "type": "Area",            "optional": false,            "field": "-.area",            "description": "<p>The area containing the room</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "[\n\t{\n\t\t\"accessReaders\": [\n\t\t\t\"identifier1234\"\n\t\t],\n\t\t\"name\": \"A404\",\n\t\t\"area\": {\n\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t},\n\t\t\"id\": \"5b2f534a0dde6c001bf242b6\"\n\t},\n\t{\n\t\t\"accessReaders\": [\n\t\t\t\"4324ident\"\n\t\t],\n\t\t\"name\": \"A406\",\n\t\t\"area\": {\n\t\t\t\"name\": \"ITI Floor\",\n\t\t\t\"id\": \"5b2f53450dde6c001bf242b4\"\n\t\t},\n\t\t\"id\": \"5b2f534a0dde6c34r3r001bf242b6\"\n\t}\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "POST",    "url": "/access/giveAccess",    "title": "Give access to a room",    "name": "AccessGiveAccess",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "roomID",            "description": "<p>The id of the room to give access to</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "userID",            "description": "<p>The id of the user to give access to the room</p>"          },          {            "group": "Parameter",            "type": "Int",            "optional": true,            "field": "startDate",            "description": "<p>The start Date, as Unix milliseconds time</p>"          },          {            "group": "Parameter",            "type": "Int",            "optional": true,            "field": "endDate",            "description": "<p>The end Date, as Unix milliseconds time</p>"          },          {            "group": "Parameter",            "type": "Int",            "optional": true,            "field": "startTime",            "description": "<p>The start Time, as minutes past midnight</p>"          },          {            "group": "Parameter",            "type": "Int",            "optional": true,            "field": "endTime",            "description": "<p>The end Time, as minutes past midnight</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"roomID\" : \"537434hbbh\",\n    \"userID\" : \"4e83e3fnwewefj\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the room or user doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "POST",    "url": "/access/accesses/room/reader",    "title": "Create room reader",    "name": "AccessRoomReaderCreate",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "roomID",            "description": "<p>The id of the room</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "identifier",            "description": "<p>The identifier of the access reader</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"roomID\" : \"5374344234hr323bbh\",\n    \"identifier\" : \"248893rrfrhe\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the room doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "DELETE",    "url": "/access/accesses/room/:roomID/reader/:readerID",    "title": "Delete room reader",    "name": "AccessRoomReaderDelete",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty Response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "roomID",            "description": "<p>The id of the room</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "readerID",            "description": "<p>The id of the reader</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"roomID\" : \"r3230424903\",\n    \"readerID\" : \"413984832048sfffe\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the room or reader doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "GET",    "url": "/access/accesses/room/:id/readers",    "title": "Get room readers",    "name": "AccessRoomReaderGet",    "group": "Access",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "String[]",            "optional": false,            "field": "-",            "description": "<p>Readers array is the root of the document</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " [\n\t\"identifier1234\",\n\t\"identifier1423235\",\n]",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the room</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"id\" : \"r3230424903\",\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin permissions</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the room doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/access.js",    "groupTitle": "Access"  },  {    "type": "POST",    "url": "/auth/changePassword",    "title": "Change Password",    "name": "ChangePassword",    "group": "Auth",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "oldPassword",            "description": "<p>The current password</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The new password</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password2",            "description": "<p>The new password confirmation</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"oldPassword\" : \"12345\",\n    \"password\" : \"Pa$$w0rd\",\n    \"password2\" : \"Pa$$w0rd\"\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly or passwords don't match</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/auth.js",    "groupTitle": "Auth"  },  {    "type": "POST",    "url": "/auth/login",    "title": "Login",    "name": "Login",    "group": "Auth",    "version": "1.0.0",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>The email to login with</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The password to login with</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"email\" : \"smartguy@hepia.ch\",\n    \"password\" : \"Pa$$w0rd\"\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>The JWT Token to use to access the rest of the API</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The ID of the user who logged in</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "{\n    \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc0FkbWluIjp0cnVlLCJiYWxhbmNlIjowLCJpc0xpYnJhcmlhbiI6ZmFsc2UsImFjY2VwdHNQYXltZW50cyI6ZmFsc2UsImFkbWluRm9yQXJlYXMiOltdLCJjYW5JbnZpdGUiOmZhbHNlLCJpc0F1ZGl0b3IiOmZhbHNlLCJlbWFpbCI6Im1heGltZWxvdmlub0BnbWFpbC5jb20iLCJuYW[...]\",\n    \"id\" : \"8008CAFE\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if email or password are wrong</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/auth.js",    "groupTitle": "Auth"  },  {    "type": "GET",    "url": "/logs/all",    "title": "Retrieve all logs",    "name": "AllLogs",    "group": "Logs",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>Logs array is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.id",            "description": "<p>The log id</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.category",            "description": "<p>The log category</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.triggeringUser",            "description": "<p>The User object for the user that triggered the log</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.description",            "description": "<p>The description of the log</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.date",            "description": "<p>The date of the log, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "Object",            "optional": false,            "field": "-.rawData",            "description": "<p>Additional data</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " [\n\t{\n\t\t\"date\": 1525784715359,\n\t\t\"category\": \"User Password Change\",\n\t\t\"triggeringUser\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"balance\": 0,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"email\": \"vincent.tournier@balelec.ch\",\n\t\t\t\"name\": \"Vincent Tournier\",\n\t\t\t\"id\": \"5ae99baf51cba71d9d11c63c\"\n\t\t},\n\t\t\"description\": \"Vincent Tournier changed its password\",\n\t\t\"id\": \"5af1a1733e56ff9fb9975720\"\n\t},\n\t{\n\t\t\"date\": 1525769974847,\n\t\t\"category\": \"User Password Change\",\n\t\t\"triggeringUser\": {\n\t\t\t\"isAdmin\": false,\n\t\t\t\"balance\": 0,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"email\": \"maja.stajic@etu.hesge.ch\",\n\t\t\t\"name\": \"Maja Stajic\",\n\t\t\t\"id\": \"5aef08eed1d64f67166dd833\"\n\t\t},\n\t\t\"description\": \"Maja Stajic changed its password\",\n\t\t\"id\": \"5af16bdd7464de6173733a26\"\n\t}\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/logs.js",    "groupTitle": "Logs"  },  {    "type": "GET",    "url": "/logs/categories",    "title": "Retrieve all log categories",    "name": "CategoriesLogs",    "group": "Logs",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "String[]",            "optional": false,            "field": "-",            "description": "<p>Categories array</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "[\n\t\"User Creation\",\n\t\"User Password Change\",\n\t\"User Deleted\",\n\t\"Admin Imports Users\",\n\t\"Admin Cancels Import\",\n\t\"Admin Assigned NFC Tag\",\n\t\"Admin Removed NFC Tag\",\n\t\"Admin Add To Balance\",\n\t\"Admin Password Change\",\n\t\"Admin Permissions Change\",\n\t\"Admin Creates Area\",\n\t\"Admin Removes Area\",\n\t\"Admin Area Delegation\",\n\t\"Admin Removes Delegation\",\n\t\"Admin Creates Room\",\n\t\"Admin Deletes Room\",\n\t\"Admin Gives Access\",\n\t\"Admin Removes Access\",\n\t\"Admin Does Request\",\n\t\"Admin Deletes Request\"\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/logs.js",    "groupTitle": "Logs"  },  {    "type": "GET",    "url": "/logs/range/:startDate/:endDate",    "title": "Retrieve all logs in a given date Range",    "name": "RangeLogs",    "group": "Logs",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Int",            "optional": false,            "field": "startDate",            "description": "<p>The startDate as Unix milliseconds time</p>"          },          {            "group": "Parameter",            "type": "Int",            "optional": false,            "field": "endDate",            "description": "<p>The endDate as Unix milliseconds time</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n    \"startDate\" : 1525752000,\n    \"endDate\" : 1525784716\n}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>Logs array is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.id",            "description": "<p>The log id</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.category",            "description": "<p>The log category</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.triggeringUser",            "description": "<p>The User object for the user that triggered the log</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.description",            "description": "<p>The description of the log</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.date",            "description": "<p>The date of the log, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "Object",            "optional": false,            "field": "-.rawData",            "description": "<p>Additional data</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " [\n\t{\n\t\t\"date\": 1525784715359,\n\t\t\"category\": \"User Password Change\",\n\t\t\"triggeringUser\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"balance\": 0,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"email\": \"vincent.tournier@balelec.ch\",\n\t\t\t\"name\": \"Vincent Tournier\",\n\t\t\t\"id\": \"5ae99baf51cba71d9d11c63c\"\n\t\t},\n\t\t\"description\": \"Vincent Tournier changed its password\",\n\t\t\"id\": \"5af1a1733e56ff9fb9975720\"\n\t},\n\t{\n\t\t\"date\": 1525769974847,\n\t\t\"category\": \"User Password Change\",\n\t\t\"triggeringUser\": {\n\t\t\t\"isAdmin\": false,\n\t\t\t\"balance\": 0,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"email\": \"maja.stajic@etu.hesge.ch\",\n\t\t\t\"name\": \"Maja Stajic\",\n\t\t\t\"id\": \"5aef08eed1d64f67166dd833\"\n\t\t},\n\t\t\"description\": \"Maja Stajic changed its password\",\n\t\t\"id\": \"5af16bdd7464de6173733a26\"\n\t}\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/logs.js",    "groupTitle": "Logs"  },  {    "type": "GET",    "url": "/init",    "title": "Initializes the first user",    "name": "Init",    "group": "Other",    "version": "1.0.0",    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>The email of the created user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The password of the created user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": " {\n\t\"email\": \"hello@hello.com\",\n\t\"password\": \"risitas\"\n }",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadReques",            "description": "<p>Error happens if the server is already initialized (contains at least one user)</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/index.js",    "groupTitle": "Other"  },  {    "type": "POST",    "url": "/transactions/addBalance",    "title": "Add money to a user balance",    "name": "TransactionsAddBalance",    "group": "Transactions",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "userID",            "description": "<p>The ID of the user to recharge</p>"          },          {            "group": "Parameter",            "type": "Double",            "optional": false,            "field": "amount",            "description": "<p>The payment amount</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"userID\" : \"2438237fdsf\",\n    \"amount\" : 42\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have admin rights</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/transactions.js",    "groupTitle": "Transactions"  },  {    "type": "GET",    "url": "/transactions/balance",    "title": "Retrieve the balance of the connected user",    "name": "TransactionsBalance",    "group": "Transactions",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Double",            "optional": false,            "field": "-",            "description": "<p>The balance value is the whole content</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "42.50",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/transactions.js",    "groupTitle": "Transactions"  },  {    "type": "POST",    "url": "/transactions/getPaid",    "title": "Receive a payment from a user",    "name": "TransactionsGetPaid",    "group": "Transactions",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "title",            "description": "<p>The payment title description</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "fromID",            "description": "<p>The card ID scanned for the user</p>"          },          {            "group": "Parameter",            "type": "Double",            "optional": false,            "field": "amount",            "description": "<p>The payment amount</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"title\" : \"El Risitas Payment\",\n    \"fromID\" : \"423432080f\",\n    \"amount\" : 42\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you don't have permission to accept payments</p>"          }        ],        "500": [          {            "group": "500",            "optional": false,            "field": "InternalServerError",            "description": "<p>Error happens if the transaction can not be made, for example not enough money</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/transactions.js",    "groupTitle": "Transactions"  },  {    "type": "GET",    "url": "/transactions/my",    "title": "Retrieve the connected user's transactions",    "name": "TransactionsMy",    "group": "Transactions",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>Transactions array is the root document returned here</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.stripe",            "description": "<p>Flag to specify if the transaction is a stripe charge</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.adminCharge",            "description": "<p>Flag to specify if the transaction is a charge by an admin</p>"          },          {            "group": "200",            "type": "Int",            "optional": false,            "field": "-.amount",            "description": "<p>The amount of the transactions, with the correct sign from the user's point of view</p>"          },          {            "group": "200",            "type": "Sting",            "optional": false,            "field": "-.title",            "description": "<p>The transaction title</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.id",            "description": "<p>The transaction id</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.data",            "description": "<p>The transaction date, as Unix milliseconds time</p>"          },          {            "group": "200",            "type": "User",            "optional": false,            "field": "-.from",            "description": "<p>The source user</p>"          },          {            "group": "200",            "type": "User",            "optional": true,            "field": "-.to",            "description": "<p>The destination user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "[\n\t{\n\t\t\"stripe\": false,\n\t\t\"adminCharge\": true,\n\t\t\"amount\": 10,\n\t\t\"to\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"maximelovino@gmail.com\",\n\t\t\t\"name\": \"Maxime Lovino\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcb7\"\n\t\t},\n\t\t\"title\": \"Added by admin Maxime Lovino\",\n\t\t\"date\": 1531036757189,\n\t\t\"id\": \"5b41c4550dde6c001bf242cf\"\n\t},\n\t{\n\t\t\"stripe\": false,\n\t\t\"adminCharge\": false,\n\t\t\"amount\": -15,\n\t\t\"from\": {\n\t\t\t\"isAdmin\": true,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": false,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"maximelovino@gmail.com\",\n\t\t\t\"name\": \"Maxime Lovino\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcb7\"\n\t\t},\n\t\t\"to\": {\n\t\t\t\"isAdmin\": false,\n\t\t\t\"isLibrarian\": false,\n\t\t\t\"acceptsPayments\": true,\n\t\t\t\"adminForAreas\": [],\n\t\t\t\"canInvite\": false,\n\t\t\t\"isAuditor\": false,\n\t\t\t\"email\": \"cafet@hepia.ch\",\n\t\t\t\"name\": \"Cafet Novae\",\n\t\t\t\"importBatch\": \"038e9a70-7662-11e8-ab85-f986a9facd10\",\n\t\t\t\"cardId\": \"0444ae929e3380\",\n\t\t\t\"id\": \"5b2d67fd9073cd001b2cbcba\"\n\t\t},\n\t\t\"title\": \"Burger\",\n\t\t\"date\": 1531036728170,\n\t\t\"id\": \"5b41c4380dde6c001bf242ce\"\n\t}\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/transactions.js",    "groupTitle": "Transactions"  },  {    "type": "POST",    "url": "/transactions/pay",    "title": "Make a payment to a user",    "name": "TransactionsPay",    "group": "Transactions",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "title",            "description": "<p>The payment title description</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "toID",            "description": "<p>The card ID scanned for the user</p>"          },          {            "group": "Parameter",            "type": "Double",            "optional": false,            "field": "amount",            "description": "<p>The payment amount</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    \"title\" : \"El Risitas Payment\",\n    \"toID\" : \"423432080f\",\n    \"amount\" : 42\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "500": [          {            "group": "500",            "optional": false,            "field": "InternalServerError",            "description": "<p>Error happens if the transaction can not be made, for example not enough money</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/transactions.js",    "groupTitle": "Transactions"  },  {    "type": "GET",    "url": "/users/all",    "title": "Get all users",    "name": "AllUsers",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>User array is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.id",            "description": "<p>The id of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The name of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.email",            "description": "<p>The email of the user</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isAdmin",            "description": "<p>A boolean to specify if the user has admin role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.canInvite",            "description": "<p>A boolean to specify if the user has invite role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.acceptsPayments",            "description": "<p>A boolean to specify if the user has acceptsPayment role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isAuditor",            "description": "<p>A boolean to specify if the user has auditor role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isLibrarian",            "description": "<p>A boolean to specify if the user has librarian role</p>"          },          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-.adminForAreas",            "description": "<p>An array of areas the user is admin for</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.adminForAreas.id",            "description": "<p>The id of the area</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.adminForAreas.name",            "description": "<p>The name of the area</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.importBatch",            "description": "<p>The import batch id of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.cardID",            "description": "<p>The id of the user card</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.virtualCard",            "description": "<p>The id of the user virtualCard</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.expiration",            "description": "<p>The expiration date of this user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "[\n\t{\n\t\t\"isAdmin\": false,\n\t\t\"isLibrarian\": false,\n\t\t\"acceptsPayments\": true,\n\t\t\"adminForAreas\": [],\n\t\t\"canInvite\": false,\n\t\t\"isAuditor\": false,\n\t\t\"email\": \"cafet@hepia.ch\",\n\t\t\"name\": \"Cafet Novae\",\n\t\t\"importBatch\": \"4526f000-7314-11e8-8f2b-9318a3e8a3ea\",\n\t\t\"id\": \"5b27dd110abf2c001c15f4b5\"\n\t},\n\t{\n\t\t\"isAdmin\": true,\n\t\t\"isLibrarian\": false,\n\t\t\"acceptsPayments\": false,\n\t\t\"adminForAreas\": [],\n\t\t\"canInvite\": false,\n\t\t\"isAuditor\": false,\n\t\t\"email\": \"root@pockethepia.maximelovino.ch\",\n\t\t\"name\": \"Default Root Account\",\n\t\t\"id\": \"5b1fd5bb44ab8b001de7de16\"\n\t}\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "PUT",    "url": "/users/assign",    "title": "Assign a tag to a user",    "name": "AssignTagUser",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "userID",            "description": "<p>The id of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "tagID",            "description": "<p>The id of the tag to assign</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n    \"userID\" : \"42352545207097153\",\n    \"tagID\" : \"CAFE8008\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the user doesn't exist</p>"          }        ],        "500": [          {            "group": "500",            "optional": false,            "field": "InternalServerError",            "description": "<p>Error happens if the tag is already assigned</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "PUT",    "url": "/users/changePermissions/:id",    "title": "Change user permissions",    "name": "ChangePermissions",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the user for which to change permissions</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isAdmin",            "description": "<p>A boolean to specify if the user has admin role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "canInvite",            "description": "<p>A boolean to specify if the user has invite role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "acceptsPayments",            "description": "<p>A boolean to specify if the user has acceptsPayment role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isAuditor",            "description": "<p>A boolean to specify if the user has auditor role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isLibrarian",            "description": "<p>A boolean to specify if the user has librarian role</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n    \"id\" : \"cuck\",\n    \"isLibrarian\" : \"true\",\n    \"isAdmin\" : \"true\",\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the user doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "POST",    "url": "/users/create",    "title": "Create user",    "name": "CreateUser",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The name of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>The email of the user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The password for the user</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isAdmin",            "description": "<p>A boolean to specify if the user has admin role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "canInvite",            "description": "<p>A boolean to specify if the user has invite role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "acceptsPayments",            "description": "<p>A boolean to specify if the user has acceptsPayment role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isAuditor",            "description": "<p>A boolean to specify if the user has auditor role</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "isLibrarian",            "description": "<p>A boolean to specify if the user has librarian role</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "{\n    name : El Risitas,\n    email : risitas@jvc.com,\n    password : Pa$$w0rd\n}",          "type": "x-www-form-urlencoded"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "GET",    "url": "/users/current",    "title": "Get connected user",    "name": "CurrentUser",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Object",            "optional": false,            "field": "-",            "description": "<p>User object is the root document returned here</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.id",            "description": "<p>The id of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The name of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.email",            "description": "<p>The email of the user</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isAdmin",            "description": "<p>A boolean to specify if the user has admin role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.canInvite",            "description": "<p>A boolean to specify if the user has invite role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.acceptsPayments",            "description": "<p>A boolean to specify if the user has acceptsPayment role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isAuditor",            "description": "<p>A boolean to specify if the user has auditor role</p>"          },          {            "group": "200",            "type": "Boolean",            "optional": false,            "field": "-.isLibrarian",            "description": "<p>A boolean to specify if the user has librarian role</p>"          },          {            "group": "200",            "type": "Object[]",            "optional": false,            "field": "-.adminForAreas",            "description": "<p>An array of areas the user is admin for</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.adminForAreas.id",            "description": "<p>The id of the area</p>"          },          {            "group": "200",            "type": "String",            "optional": false,            "field": "-.adminForAreas.name",            "description": "<p>The name of the area</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.importBatch",            "description": "<p>The import batch id of the user</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.cardID",            "description": "<p>The id of the user card</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.virtualCard",            "description": "<p>The id of the user virtualCard</p>"          },          {            "group": "200",            "type": "String",            "optional": true,            "field": "-.expiration",            "description": "<p>The expiration date of this user</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "{\n\t\"isAdmin\": true,\n\t\"isLibrarian\": false,\n\t\"acceptsPayments\": false,\n\t\"adminForAreas\": [],\n\t\"canInvite\": false,\n\t\"isAuditor\": false,\n\t\"email\": \"maximelovino@gmail.com\",\n\t\"name\": \"Maxime Lovino\",\n\t\"importBatch\": \"f5b43380-74cf-11e8-8fd2-514acc764100\",\n\t\"id\": \"5b2ac574cb90fa001b99e843\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "DELETE",    "url": "/users/delete/:id",    "title": "Delete user",    "name": "DeleteUser",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the user to delete</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n    id : 5b1fd5bb44ab8b001de7de16\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if you try to delete yourself</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "POST",    "url": "/users/import",    "title": "Import a batch of users",    "name": "ImportUsers",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "File",            "optional": false,            "field": "csvFile",            "description": "<p>A CSV file containing the users</p>"          }        ]      }    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "DELETE",    "url": "/users/removeTag/:id",    "title": "Removes a tag for a user",    "name": "RemoveTagUser",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the user</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n    \"userID\" : \"42352545207097153\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>Error happens if the user doesn't exist</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "PUT",    "url": "/users/resetPassword/:id",    "title": "Reset user password",    "name": "ResetPassword",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the user for which to reset the password</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The new passsword</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password2",            "description": "<p>The new password, confirmed</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n    \"id\" : \"5b1fd5bb44ab8b001de7de16\",\n    \"password\" : \"cuck\",\n    \"password2\" : \"cuck\",\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly or passwords don't match</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  },  {    "type": "DELETE",    "url": "/users/undo/:id",    "title": "Undoes a batch import of users",    "name": "UndoImportUsers",    "group": "Users",    "version": "1.0.0",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The content of the authorization header must be of the form &quot;Bearer $token&quot; where $token is the JWT Token received at login</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Void",            "optional": false,            "field": "OK",            "description": "<p>Empty response</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the import we want to undo</p>"          }        ]      },      "examples": [        {          "title": "{} Request-Example:",          "content": "{\n     \"id\" : \"42352545207097153\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Error happens if the params are not set correctly</p>"          }        ],        "401": [          {            "group": "401",            "optional": false,            "field": "Unauthorized",            "description": "<p>Error happens if JWT Token is wrong or authorization was not correctly provided</p>"          }        ],        "403": [          {            "group": "403",            "optional": false,            "field": "Forbidden",            "description": "<p>Error happens if you try to access this without having the admin role</p>"          }        ]      }    },    "filename": "backend/pocketHepiaServer/app/routes/users.js",    "groupTitle": "Users"  }]
